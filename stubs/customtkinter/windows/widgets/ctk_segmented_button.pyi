import tkinter
from typing import Any, Callable

from _typeshed import Incomplete

from .ctk_button import CTkButton as CTkButton
from .ctk_frame import CTkFrame as CTkFrame
from .font import CTkFont as CTkFont
from .theme import ThemeManager as ThemeManager
from .utility import check_kwargs_empty as check_kwargs_empty

class CTkSegmentedButton(CTkFrame):
    def __init__(self, master: Any, width: int = 140, height: int = 28, corner_radius: int | None = None, border_width: int = 3, bg_color: str | tuple[str, str] = "transparent", fg_color: str | tuple[str, str] | None = None, selected_color: str | tuple[str, str] | None = None, selected_hover_color: str | tuple[str, str] | None = None, unselected_color: str | tuple[str, str] | None = None, unselected_hover_color: str | tuple[str, str] | None = None, text_color: str | tuple[str, str] | None = None, text_color_disabled: str | tuple[str, str] | None = None, background_corner_colors: tuple[str | tuple[str, str]] | None = None, font: tuple | CTkFont | None = None, values: list | None = None, variable: tkinter.Variable | None = None, dynamic_resizing: bool = True, command: Callable[[str], Any] | None = None, state: str = "normal") -> None: ...
    def destroy(self) -> None: ...
    def configure(self, **kwargs) -> None: ...
    def cget(self, attribute_name: str) -> any: ...
    def set(self, value: str, from_variable_callback: bool = False, from_button_callback: bool = False): ...
    def get(self) -> str: ...
    def index(self, value: str) -> int: ...
    def insert(self, index: int, value: str): ...
    def move(self, new_index: int, value: str): ...
    def delete(self, value: str): ...
    def bind(self, sequence: Incomplete | None = None, command: Incomplete | None = None, add: Incomplete | None = None) -> None: ...
    def unbind(self, sequence: Incomplete | None = None, funcid: Incomplete | None = None) -> None: ...
