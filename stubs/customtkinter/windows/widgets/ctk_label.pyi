from typing import Any, Callable

from .core_rendering import CTkCanvas as CTkCanvas
from .core_rendering import DrawEngine as DrawEngine
from .core_widget_classes import CTkBaseClass as CTkBaseClass
from .font import CTkFont as CTkFont
from .image import CTkImage as CTkImage
from .theme import ThemeManager as ThemeManager
from .utility import check_kwargs_empty as check_kwargs_empty
from .utility import pop_from_dict_by_set as pop_from_dict_by_set

class CTkLabel(CTkBaseClass):
    def __init__(self, master: Any, width: int = 0, height: int = 28, corner_radius: int | None = None, bg_color: str | tuple[str, str] = "transparent", fg_color: str | tuple[str, str] | None = None, text_color: str | tuple[str, str] | None = None, text_color_disabled: str | tuple[str, str] | None = None, text: str = "CTkLabel", font: tuple | CTkFont | None = None, image: CTkImage | None = None, compound: str = "center", anchor: str = "center", wraplength: int = 0, **kwargs) -> None: ...
    def destroy(self) -> None: ...
    def configure(self, require_redraw: bool = False, **kwargs) -> None: ...
    def cget(self, attribute_name: str) -> any: ...
    def bind(self, sequence: str = None, command: Callable = None, add: str = True): ...
    def unbind(self, sequence: str = None, funcid: str | None = None): ...
    def focus(self): ...
    def focus_set(self): ...
    def focus_force(self): ...
