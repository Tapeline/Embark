from typing import Any, Callable

from .core_rendering import CTkCanvas as CTkCanvas
from .core_rendering import DrawEngine as DrawEngine
from .core_widget_classes import CTkBaseClass as CTkBaseClass
from .ctk_frame import CTkFrame as CTkFrame
from .ctk_segmented_button import CTkSegmentedButton as CTkSegmentedButton
from .theme import ThemeManager as ThemeManager

class CTkTabview(CTkBaseClass):
    def __init__(self, master: Any, width: int = 300, height: int = 250, corner_radius: int | None = None, border_width: int | None = None, bg_color: str | tuple[str, str] = "transparent", fg_color: str | tuple[str, str] | None = None, border_color: str | tuple[str, str] | None = None, segmented_button_fg_color: str | tuple[str, str] | None = None, segmented_button_selected_color: str | tuple[str, str] | None = None, segmented_button_selected_hover_color: str | tuple[str, str] | None = None, segmented_button_unselected_color: str | tuple[str, str] | None = None, segmented_button_unselected_hover_color: str | tuple[str, str] | None = None, text_color: str | tuple[str, str] | None = None, text_color_disabled: str | tuple[str, str] | None = None, command: Callable | Any = None, anchor: str = "center", state: str = "normal", **kwargs) -> None: ...
    def winfo_children(self) -> list[any]: ...
    def configure(self, require_redraw: bool = False, **kwargs) -> None: ...
    def cget(self, attribute_name: str): ...
    def tab(self, name: str) -> CTkFrame: ...
    def insert(self, index: int, name: str) -> CTkFrame: ...
    def add(self, name: str) -> CTkFrame: ...
    def index(self, name) -> int: ...
    def move(self, new_index: int, name: str): ...
    def rename(self, old_name: str, new_name: str): ...
    def delete(self, name: str): ...
    def set(self, name: str): ...
    def get(self) -> str: ...
