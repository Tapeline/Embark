<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Конфигурация" id="Конфигурация">

    <chapter title="Схемы" id="schemas">
        <p>
            Отсюда и далее будет использоваться следующий
            синтаксис для определения YAML schema
        </p>
        <code-block lang="python">
            name: type
            name: type = default value
        </code-block>
        <p>
            Почти то же самое, что и Pydantic.
            Примеры:
        </p>
        <table>
            <tr>
                <td>Тип</td>
                <td>Описание</td>
                <td>Пример</td>
            </tr>
            <tr>
                <td><code>int</code></td>
                <td>Целое число</td>
                <td><code>3</code></td>
            </tr>
            <tr>
                <td><code>str</code></td>
                <td>Строка (текст)</td>
                <td><code>"my text"</code></td>
            </tr>
            <tr>
                <td><code>list[T]</code></td>
                <td>Список элементов типа T. К примеру,
                    list[int] - список целых чисел,
                    list[list[int]] - список списков
                    целых чисел</td>
                <td>
                    <p>
                        list[int]: <code>[1, 2, 3]</code>
                    </p>
                    <code-block lang="yaml">
                        my_int_list:
                            - 1
                            - 2
                            - 3
                    </code-block>
                </td>
            </tr>
            <tr>
                <td><code>object</code></td>
                <td>YAML объект (пары ключ-значение)</td>
                <td>
                    <code-block lang="yaml">
                        a: 1
                        b: "abc"
                        c: []
                    </code-block>
                </td>
            </tr>
            <tr>
                <td><code>Optional[T]</code></td>
                <td>Определяет это поле как опциональное -
                оно либо типа T, либо вообще не задано</td>
                <td>
                    <p>
                        Optional[list[int]]: <code>[1, 2, 3]</code>
                    </p>
                    <p>
                        Optional[list[int]]: или мы можем вообще не
                        задавать это поле
                    </p>
                </td>
            </tr>
            <tr>
                <td><code>None</code></td>
                <td>Определяет "пустое" значение</td>
                <td> </td>
            </tr>
        </table>
        <p>Пример 1:</p>
        <code-block lang="python">
            schema Message:
                text: str
                author: str
                reply_to: Optional[int] = None
        </code-block>
        <code-block lang="yaml">
            text: "Hello, World!"
            author: "L. Torvalds"
            reply_to: 13650003443
        </code-block>
        <code-block lang="yaml">
            # also valid
            text: "Hello, World!"
            author: "L. Torvalds"
        </code-block>
        <p>Пример 2 (беря в счет Message из примера 1):</p>
        <code-block lang="python">
            schema Chat:
                name: str
                messages: list[Message]
        </code-block>
        <code-block lang="yaml">
            name: "My cozy IRC"
            messages:
                - text: "Hello, World!"
                  author: "L. Torvalds"
                - text: "Hello, Linus!"
                  author: "R. Stallman"
        </code-block>
    </chapter>

    <chapter title="Embark entities" id="embark_entities">
        <chapter title="Playbook" id="playbook">
            <code-block lang="python">
                name: str
                tasks: list[Task]
            </code-block>
            <p>Example:</p>
            <code-block lang="yaml">
                name: "Test playbook"
                tasks:
                    - name: My task
                      std.cmd:
                        cmd: ""
            </code-block>
        </chapter>
        <chapter title="Task" id="task">
            <code-block lang="python">
                name: str
                _: object
            </code-block>
            <p>
                Здесь <code>_</code> используется для
                определения любого ключа. Подробнее:
                <a href="Поток-выполнения.topic"/>
            </p>
            <p>Пример:</p>
            <code-block lang="yaml">
                name: My task
                std.cmd:
                    cmd: ""
            </code-block>
        </chapter>

        <p>
            Другие примеры можно найти на
            <a href="Быстрый-старт.topic"/>
        </p>
    </chapter>

    <chapter title="Переменные" id="variables">
        <p>
            Вы можете использовать переменные в своих плейбуках. Синтаксис:
            <code>{{имя_переменной}}</code> (в строке)
        </p>
        <p>
            Перменные определяются в двух местах: окружение и опциональный блок
            <code>variables</code> в плейбуке, причем переменные окружения имеют
            меньший приоритет при применении
        </p>
        <p>Пример:</p>
        <code-block lang="yaml">
            name: Test playbook
            variables:
              urls.vlc: https://get.videolan.org/vlc/3.0.21/win64/vlc-3.0.21-win64.exe
            tasks:
              - name: Download VLC
                std.download:
                url: "{{urls.vlc}}"
                dst: vlc.exe
        </code-block>
        <tip title="Где применять переменные?"><p>
            Настоятельно рекомендуется сохранять в переменные URL и версии для
            установочных и скачивающих задач. Таким образом, вам будет удобнее
            обновлять плейбук с выходом новых версий установливаемого ПО.
        </p></tip>
    </chapter>

</topic>